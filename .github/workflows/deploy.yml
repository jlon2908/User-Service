name: Deploy User Service to AWS ECS

on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
      VPC_ID: ${{ secrets.VPC_ID }}
      SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}
      ALB_ARN: ${{ secrets.ALB_ARN }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_JDBC_URL: ${{ secrets.DB_JDBC_URL }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init ECR
        working-directory: ./terraform/ecr
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: terraform init -input=false

      - name: Terraform Import ECR (solo si no estÃ¡ en el estado)
        working-directory: ./terraform/ecr
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          terraform state show aws_ecr_repository.user_service || terraform import -input=false aws_ecr_repository.user_service user-service || true

      - name: Get ECR Repository URL
        id: get_ecr_url
        working-directory: ./terraform/ecr
        run: |
          echo "ECR_REPOSITORY_URL=$(terraform output -raw ecr_repository_url)" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY_URL }}

      - name: Build Docker image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY_URL }}:latest .

      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.ECR_REPOSITORY_URL }}:latest

      - name: Terraform Init ECS
        working-directory: ./terraform/ecs
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: terraform init -input=false

      - name: Debug variables
        run: |
          echo "VPC_ID=${{ secrets.VPC_ID }}"
          echo "SUBNET_IDS=[\"subnet-057a322f484b9f962\",\"subnet-09ee219f4838cb06f\"]"
          echo "SECURITY_GROUP_ID=${{ secrets.SECURITY_GROUP_ID }}"
          echo "ALB_ARN=${{ secrets.ALB_ARN }}"
          echo "ECR_IMAGE_URL=${{ env.ECR_IMAGE_URL }}"

      - name: Terraform Import Target Group
        working-directory: ./terraform/ecs
        run: terraform import aws_lb_target_group.user_service arn:aws:elasticloadbalancing:us-east-1:148761677807:targetgroup/tg-user-service/fe077ac7b490fd27 || true

      - name: Terraform Apply ECS
        working-directory: ./terraform/ecs
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          ECR_IMAGE_URL: ${{ env.ECR_REPOSITORY_URL }}:latest
        run: |
          terraform apply -auto-approve -input=false \
            -var="vpc_id=${{ secrets.VPC_ID }}" \
            -var='subnet_ids=["subnet-057a322f484b9f962","subnet-09ee219f4838cb06f"]' \
            -var="security_group_id=${{ secrets.SECURITY_GROUP_ID }}" \
            -var="alb_arn=${{ secrets.ALB_ARN }}" \
            -var="alb_listener_arn=${{ secrets.ALB_LISTENER_ARN }}" \
            -var="ecr_image_url=${{ env.ECR_IMAGE_URL }}" \
            -var="execution_role_arn=arn:aws:iam::148761677807:role/ecsTaskExecutionRole-user-service"
